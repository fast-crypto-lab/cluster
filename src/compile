#!/usr/bin/env python3

import json
import os
import re
import sys


def read_all_hosts(DIR):
    os.chdir(DIR + '/hosts')
    filenames = os.listdir('.')
    hosts = []
    for filename in filenames:
        with open(filename, 'rb') as f:
            hosts.append([filename, f.read()])
    return hosts


def read_all_users(DIR):
    os.chdir(DIR + '/users')
    filenames = os.listdir('.')
    users = []
    for filename in filenames:
        with open(filename, 'rb') as f:
            users.append([filename, f.read()])
    return users


def _is_good_private_ip_line(line):
    PAT = '^private-ip 10\.3\.2\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-4])$'
    return line == 'private-ip none' or re.fullmatch(PAT, line)


def _is_good_public_ip_port_line(line):
    PAT = (
        '^public-ip-port '
        '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
        '\.'
        '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
        '\.'
        '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
        '\.'
        '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
        ':'
        '([0-9]|[1-9][0-9]{1,4})'
        '$')
    return re.fullmatch(PAT, line) and int(line.split(':')[1]) < 65536


def _is_good_host_keys(keys):
    PAT_25519 = '^ssh-ed25519 [A-Za-z0-9+/]{68}$'
    PAT_ECDSA = '^ecdsa-sha2-nistp256 [A-Za-z0-9+/]{139}=$'
    PAT_RSA = '^ssh-rsa [A-Za-z0-9+/=]{372,}$'
    return len(keys) == 3 and (
        any(re.fullmatch(PAT_25519, k) for k in keys) and
        any(re.fullmatch(PAT_ECDSA, k) for k in keys) and
        any(re.fullmatch(PAT_RSA  , k) for k in keys)
        )


def parse_host(filename, filecontent):
    lines = filecontent.decode().splitlines()
    none_to_null = lambda s: None if s == 'none' else s
    try:
        assert re.fullmatch('^[a-z][a-z0-9]{1,30}$', filename)
        assert len(lines) == 5
        assert _is_good_private_ip_line(lines[0])
        assert _is_good_public_ip_port_line(lines[1])
        assert _is_good_host_keys(lines[2:2+3])
        return {
            'name': filename,
            'private-ip': none_to_null(lines[0].split(' ')[1]),
            'public-ip-port': lines[1].split(' ')[1],
            'public-keys': lines[2:2+3]
        }
    except AssertionError:
        raise SyntaxError


def parse_user(filename, filecontent):
    lines = filecontent.decode().splitlines()
    PAT_25519 = '^(ssh-ed25519 [A-Za-z0-9+/]{68})( .*)?$'
    PAT_ECDSA = '^(ecdsa-sha2-nistp256 [A-Za-z0-9+/]{139}=)( .*)?$'
    PAT_RSA = '^(ssh-rsa [A-Za-z0-9+/=]{372,})( .*)?$'
    try:
        assert re.fullmatch('^1[0-9]{4}-[a-z][a-z0-9]{1,30}$', filename)
        assert len(lines) >= 1
        assert lines[0] in {'permit-sudo yes', 'permit-sudo no'}
        userid = int(filename.split('-')[0])
        username = filename.split('-')[1]
        permitsudo = lines[0].split(' ')[1] == 'yes'
        for userkey_line in lines[1:]:
            assert (
                re.fullmatch(PAT_25519, userkey_line) or
                re.fullmatch(PAT_ECDSA, userkey_line) or
                re.fullmatch(PAT_RSA  , userkey_line)
            )
        def stripcomment(ss):
            parts = ss.split(' ')
            return parts[0] + ' ' + parts[1]
        return {
            'id': userid,
            'name': username,
            'permit-sudo': permitsudo,
            'public-keys': [stripcomment(l) for l in lines[1:]]
        }
    except AssertionError:
        raise SyntaxError


def main():
    DIR = os.path.dirname(os.path.realpath(sys.argv[0]))
    hosts = read_all_hosts(DIR)
    users = read_all_users(DIR)
    FCL = {
        'hosts': [parse_host(n,h) for n,h in hosts],
        'users': [parse_user(n,h) for n,h in users]
    }
    json_file_content = json.dumps(FCL, indent='  ', sort_keys=True) + '\n'
    with open(DIR + '/../fcl.json', 'wb') as f:
        f.write(json_file_content.encode())

    #SSH_CONFIG_FILENAME      = DIR + '/../ssh_config'
    #SSH_KNOWN_HOSTS_FILENAME = DIR + '/../ssh_known_hosts'


if __name__ == '__main__':
    main()
