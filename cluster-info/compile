#!/usr/bin/env python3

import json
import os
import re
import sys


def read_all_hosts(DIR):
    os.chdir(DIR + '/hosts')
    filenames = os.listdir('.')
    hosts = []
    for filename in filenames:
        with open(filename, 'rb') as f:
            hosts.append([filename, f.read()])
    return hosts


def read_all_users(DIR):
    os.chdir(DIR + '/users')
    filenames = os.listdir('.')
    users = []
    for filename in filenames:
        with open(filename, 'rb') as f:
            users.append([filename, f.read()])
    return users


def _is_good_private_ip_line(line):
    PAT = '^private-ip 10\.3\.2\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-4])$'
    return line == 'private-ip none' or re.fullmatch(PAT, line)


def _is_good_public_ip_port_line(line):
    PAT = (
        '^public-ip-port '
        '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
        '\.'
        '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
        '\.'
        '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
        '\.'
        '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
        ':'
        '([0-9]|[1-9][0-9]{1,4})'
        '$')
    return re.fullmatch(PAT, line) and int(line.split(':')[1]) < 65536


def _is_good_host_keys(keys):
    PAT_25519 = '^ssh-ed25519 [A-Za-z0-9+/]{68}$'
    PAT_ECDSA = '^ecdsa-sha2-nistp256 [A-Za-z0-9+/]{139}=$'
    PAT_RSA = '^ssh-rsa [A-Za-z0-9+/=]{372,}$'
    return len(keys) == 3 and (
        any(re.fullmatch(PAT_25519, k) for k in keys) and
        any(re.fullmatch(PAT_ECDSA, k) for k in keys) and
        any(re.fullmatch(PAT_RSA  , k) for k in keys)
        )


def parse_host(filename, filecontent):
    lines = filecontent.decode().splitlines()
    none_to_null = lambda s: None if s == 'none' else s
    try:
        assert re.fullmatch('^[a-z][a-z0-9]{1,30}$', filename)
        assert len(lines) == 5
        assert _is_good_private_ip_line(lines[0])
        assert _is_good_public_ip_port_line(lines[1])
        assert _is_good_host_keys(lines[2:2+3])
        return {
            'name': filename,
            'private-ip': none_to_null(lines[0].split(' ')[1]),
            'public-ip-port': lines[1].split(' ')[1],
            'public-keys': lines[2:2+3]
        }
    except AssertionError:
        raise SyntaxError


def parse_user(filename, filecontent):
    lines = filecontent.decode().splitlines()
    PAT_25519 = '^(ssh-ed25519 [A-Za-z0-9+/]{68})( .*)?$'
    PAT_ECDSA = '^(ecdsa-sha2-nistp256 [A-Za-z0-9+/]{139}=)( .*)?$'
    PAT_RSA = '^(ssh-rsa [A-Za-z0-9+/=]{372,})( .*)?$'
    try:
        assert re.fullmatch('^1[0-9]{4}-[a-z][a-z0-9]{1,30}$', filename)
        assert len(lines) >= 1
        assert lines[0] in {'permit-sudo yes', 'permit-sudo no'}
        userid = int(filename.split('-')[0])
        username = filename.split('-')[1]
        permitsudo = lines[0].split(' ')[1] == 'yes'
        for userkey_line in lines[1:]:
            assert (
                re.fullmatch(PAT_25519, userkey_line) or
                re.fullmatch(PAT_ECDSA, userkey_line) or
                re.fullmatch(PAT_RSA  , userkey_line)
            )
        def stripcomment(ss):
            parts = ss.split(' ')
            return parts[0] + ' ' + parts[1]
        return {
            'id': userid,
            'name': username,
            'permit-sudo': permitsudo,
            'public-keys': [stripcomment(l) for l in lines[1:]]
        }
    except AssertionError:
        raise SyntaxError


def is_good_hosts_and_users(dd):
    import json
    import re
    NAME = 'name'           # host/user, name
    KEYS = 'public-keys'    # host/user, public keys
    PRIP = 'private-ip'     # host, null if this machine is not in 302
    PUBA = 'public-ip-port' # host, public tcp port for ssh connection
    NUID = 'id'             # user, numeric uid
    SUDO = 'permit-sudo'    # user, sudo permission
    RE_PUBKEY = (
        '^ssh-ed25519 [A-Za-z0-9+/]{68}$|'
        '^ecdsa-sha2-nistp256 [A-Za-z0-9+/]{139}=$|'
        '^ssh-rsa [A-Za-z0-9+/=]{372,}$')
    ################################################################
    def is_good_hosts(hh):
        return (type(hh) is list
            and all(is_good_host(h) for h in hh)
            and contains_no_duplicates(h[NAME] for h in hh)
            and contains_no_duplicates(h[PRIP] for h in hh if h[PRIP])
            and contains_no_duplicates(h[PUBA] for h in hh))
    def is_good_users(uu):
        return (type(uu) is list
            and all(is_good_user(u) for u in uu)
            and contains_no_duplicates(u[NUID] for u in uu)
            and contains_no_duplicates(u[NAME] for u in uu)
            and any(u[SUDO] and u[KEYS] for u in uu))
    def contains_no_duplicates(it):
        vals = list(it)
        return len(vals) == len(set(vals))
    def is_good_host(h):
        return (type(h) is dict and h.keys() >= {NAME, PRIP, PUBA, KEYS}
            and type(h[NAME]) is str
            and type(h[PRIP]) in {str, type(None)}
            and type(h[PUBA]) is str
            and type(h[KEYS]) is list and all(type(k) is str for k in h[KEYS])
            and re.fullmatch('^[a-z][a-z0-9]{1,30}$', h[NAME])
            and is_good_private_ip_address(h[PRIP])
            and is_good_public_ip_address_and_port(h[PUBA])
            and all(re.fullmatch(RE_PUBKEY, k) for k in h[KEYS]))
    def is_good_user(u):
        return (type(u) is dict and u.keys() >= {NUID, NAME, KEYS, SUDO}
            and type(u[NUID]) is int
            and type(u[NAME]) is str
            and type(u[SUDO]) is bool
            and type(u[KEYS]) is list and all(type(k) is str for k in u[KEYS])
            and 10000 <= u[NUID] <= 19999
            and re.fullmatch('^[a-z][a-z0-9]{1,30}$', u[NAME])
            and all(re.fullmatch(RE_PUBKEY, k) for k in u[KEYS]))
    def is_good_private_ip_address(addr):
        PAT = '^10\.3\.2\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-4])$'
        return addr is None or re.fullmatch(PAT, addr)
    def is_good_public_ip_address_and_port(ss):
        PAT = (
            '^'
            '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
            '\.'
            '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
            '\.'
            '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
            '\.'
            '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
            ':'
            '([0-9]|[1-9][0-9]{1,4})'
            '$')
        return re.fullmatch(PAT, ss) and int(ss.split(':')[1]) < 65536
    ################################################################
    return (type(dd) is dict
        and dd.keys() >= {'hosts', 'users'}
        and is_good_hosts(dd['hosts'])
        and is_good_users(dd['users']))


def main():
    DIR = os.path.dirname(os.path.realpath(sys.argv[0]))
    hosts = read_all_hosts(DIR)
    users = read_all_users(DIR)
    FCL = {
        'hosts': [parse_host(n,h) for n,h in hosts],
        'users': [parse_user(n,h) for n,h in users]
    }
    assert is_good_hosts_and_users(FCL), 'invalid hosts/ or users/'

    # build fcl.json
    with open(DIR + '/fcl.json', 'wb') as f:
        json_file_content = json.dumps(FCL, indent='  ', sort_keys=True) + '\n'
        f.write(json_file_content.encode())

    # build ssh_known_hosts
    SSH_KNOWN_HOSTS_FILENAME = DIR + '/ssh_known_hosts'
    with open(SSH_KNOWN_HOSTS_FILENAME, 'wb') as f:
        lines = []
        for h in FCL['hosts']:
            lines += [
                '{name} {k}\n'.format(k=k, name=h['name'])
                for k in h['public-keys']
            ]
        f.write(''.join(lines).encode())

    # build ssh_config
    SSH_CONFIG_FILENAME = DIR + '/ssh_config'
    with open(SSH_CONFIG_FILENAME, 'wb') as f:
        lines = [
            'GSSAPIAuthentication no\n',
            'PasswordAuthentication no\n',
            'KbdInteractiveAuthentication no\n',
            'ChallengeResponseAuthentication no\n',
            'PubkeyAuthentication yes\n',
            'HostbasedAuthentication yes\n',
            'PreferredAuthentications publickey,hostbased\n',
            'ConnectTimeout 5\n',
            'CheckHostIP no\n',
            'HashKnownHosts no\n',
            'UserKnownHostsFile /dev/null\n',
            'GlobalKnownHostsFile /dev/null\n',
            'StrictHostKeyChecking yes\n',
        ]
        for h in FCL['hosts']:
            name = h['name']
            addr = h['public-ip-port'].split(':')[0]
            port = h['public-ip-port'].split(':')[1]
            lines += [
                '\n',
                'Match originalhost {}\n'.format(name),
                '    HostKeyAlias {}\n'.format(name),
                '    HostName {}\n'.format(addr),
                '    Port {}\n'.format(port),
            ]
        f.write(''.join(lines).encode())


if __name__ == '__main__':
    main()
